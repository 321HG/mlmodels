{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"getcwd\t(gluon_automl.py)"
			],
			[
				"pie",
				"pipe_list\tabc"
			],
			[
				"data",
				"data_path\tabc"
			],
			[
				"os",
				"os_package_root_path\tabc"
			],
			[
				"fil",
				"file_default\tabc"
			],
			[
				"import",
				"import_fromfile\t(data.py)"
			],
			[
				"m",
				"mlmodels\tabc"
			],
			[
				"config",
				"config_mode\tabc"
			],
			[
				"daat",
				"data_path\tabc"
			],
			[
				"mode",
				"model_path\tabc"
			],
			[
				"_p",
				"_preprocess_movielens\tabc"
			],
			[
				"pre",
				"preprocess\tabc"
			],
			[
				"bat",
				"batch_size\tabc"
			],
			[
				"read",
				"read_csv\t(01_deepctr.py)"
			],
			[
				"uri",
				"uri_type\tabc"
			],
			[
				"lin",
				"linear_cols\tabc"
			],
			[
				"test",
				"test_size\tabc"
			],
			[
				"model",
				"model_keras\tabc"
			],
			[
				"Model",
				"Model_empty\tabc"
			],
			[
				"out",
				"out_path\tabc"
			],
			[
				"da",
				"data_path\tabc"
			],
			[
				"y_t",
				"y_test\tabc"
			],
			[
				"x_",
				"x_train\tabc"
			],
			[
				"compute",
				"compute_pars\tabc"
			],
			[
				"ex",
				"except"
			],
			[
				"module",
				"module_name\tparam"
			],
			[
				"mod",
				"modulex\tstatement"
			],
			[
				"am",
				"amp_i"
			],
			[
				"fom",
				"formated_df"
			],
			[
				"mo",
				"module_name"
			],
			[
				"a",
				"add_argument"
			],
			[
				"fol",
				"folder_list"
			],
			[
				"repo_",
				"repo_generate_signature"
			],
			[
				"re",
				"reponame"
			],
			[
				"repo",
				"conda_build_repo"
			],
			[
				"gi",
				"git_clone"
			],
			[
				"os_s",
				"os_system"
			],
			[
				"file",
				"file_list"
			],
			[
				"os_",
				"os_scan"
			],
			[
				"sy",
				"system"
			],
			[
				"mis",
				"miss_packages"
			],
			[
				"cu",
				"curr_os"
			],
			[
				"con",
				"conda_env"
			],
			[
				"python",
				"python_version"
			],
			[
				"sto",
				"stopwords_dict"
			],
			[
				"col",
				"colname"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# pylint: disable=C0321,C0103,C0301,E1305,E1121,C0302,C0330,C0111,W0613,W0611,R1705\n# -*- coding: utf-8 -*-\n\"\"\"\nPypi Uploader\nUsage:\nFirst of all, you need to copy the script to /usr/bin directory and mark it as an executable, like so:\n\n$ ~ sudo cp script.py /usr/bin/NAMEYOUWANT\n$ ~ sudo chmod +x /usr/bin/NAMEYOUWANT\n\nAnd then to upload PyPI, you need to create a file called .pypirc that has to contain login credentials.\n\n\n$ ~ YOURTEXTEDITOR ~/.pypirc\nOpen a file and paste this to in it:\n\n[pypi]\nusername = token\npassword = pypi-AgEI\n\n\n\"\"\"\n\n\nimport subprocess\nimport re, os, sys\nimport os.path as op\n\ncurdir = op.abspath(op.curdir)\nsetup_file = op.join(curdir, 'setup.py')\n\n\n\nclass Version(object):\n    pattern = re.compile(r\"(version\\s*=\\s*['\\\"]\\s*(\\d+)\\s*\\.\\s*(\\d+)\\s*\\.\\s*(\\d+)\\s*['\\\"])\")\n\n    def __init__(self, major, minor, patch):\n        self.major = int(major)\n        self.minor = int(minor)\n        self.patch = int(patch)\n\n    def __str__(self):\n        return f'Version({self.stringify()})'\n\n    def __repr__(self):\n        return self.__str__()\n\n    def stringify(self):\n        return f'\\'{self.major}.{self.minor}.{self.patch}\\''\n\n    def new_version(self, orig):\n        return '='.join([orig.split('=')[0], self.stringify()])\n\n    @classmethod\n    def parse(cls, string):\n        re_result = re.findall(cls.pattern, string)\n        if len(re_result) == 0:\n            return Exception('Program was not able to parse version string, please check your setup.py file.')\n\n        return re_result[0][0], cls(*re_result[0][1:])\n\n\ndef ask(question, ans='yes'):\n    return input(question).lower() == ans.lower()\n\ndef pypi_upload():\n    os.system('python setup.py sdist bdist_wheel')\n    os.system('twine upload dist/*')\n\n    \"\"\"\n    for item in os.listdir(op.abspath(op.join(setup_file, '..'))):\n        if item.endswith('.egg-info') or item in ['dist', 'build']:\n            os.system(f'rm -rf {item}')\n    \"\"\"\n\ndef update_version(path, n):\n    content = open(path, 'r').read()\n    \n    orig, version = Version.parse(content)\n    print (f'Current version: {version}')\n\n    version.major += int(n)\n    print (f'New Version: {version}')\n\n    with open(path, 'w') as file:\n        file.write(content.replace(orig, version.new_version(orig)))\n\n\ndef git_commit(message):\n    if not ask(f'About to git commit {message}, are you sure: '):\n        exit()\n\n   # os.system(f'git commit -am \"{message}\"')\n    \n    if not ask('About to git push, are you sure: '):\n        exit()\n\n    os.system('git push')\n\n\n\ndef main(*args):\n    print ('Program Started')\n    update_version(setup_file, 1)\n    # git_commit(*sys.argv[1:3])\n    pypi_upload()\n    print ('Program has ended')\n\n\n\nif __name__ == '__main__':\n    # if len(sys.argv) == 1:\n    #    print (f'Usage: python {sys.argv[0]} \"commmit message\"'); sys.exit()\n\n    main(*sys.argv[1:3])\n\n\n",
			"file": "/D/_devs/Python01/gitdev/cli_code/pypi.py",
			"file_size": 2960,
			"file_write_time": 132228799981367942,
			"settings":
			{
				"buffer_size": 2843,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\n\nPipeline :\n\n\nhttps://www.neuraxio.com/en/blog/neuraxle/2019/10/26/neat-machine-learning-pipelines.html\n\n\nhttps://github.com/Neuraxio/Neuraxle\n\n\n\n\"\"\"\n\nimport os\nimport json\nfrom pathlib import Path\nimport pandas as pd\nimport numpy as np\n\n\n\n\nfrom sklearn.decomposition import TruncatedSVD\n\n\n\n\n####################################################################################################\n# Helper functions\ndef os_package_root_path(filepath, sublevel=0, path_add=\"\"):\n    \"\"\"\n       get the module package root folder\n    \"\"\"\n    from pathlib import Path\n    path = Path(os.path.realpath(filepath)).parent\n    for i in range(1, sublevel + 1):\n        path = path.parent\n\n    path = os.path.join(path.absolute(), path_add)\n    return path\n\n\ndef log(*s, n=0, m=1):\n    sspace = \"#\" * n\n    sjump = \"\\n\" * m\n    print(sjump, sspace, s, sspace, flush=True)\n\n\n\n\n####################################################################################################\ndef pipe_split(in_pars, out_pars, compute_pars, **kw) :\n\n    df = pd.read_csv(in_pars['in_path'])\n    colid = in_pars['colid']\n    for colname, cols in out_pars['col_group'] :\n       dfi =  df[ [colid] + cols ]\n       dfi.to_pickle( out_pars['out_path']  + f'{colname}' )\n       log(colname, cols )\n\n\ndef pipe_merge(in_pars, out_pars, compute_pars, **kw) :\n    pass\n\n\n\ndef pipe_load(in_pars) :\n    df = pd.read_csv(in_pars['in_path'])\n    return df\n\n\ndef pipeline_run( pipe_list, in_pars, out_pars, compute_pars, **kw) :\n    \"\"\"\n    :param pipe_list:\n    :return:\n    \"\"\"\n    dfin = pipe_load(in_pars)\n    for (pname, pexec, args) in pipe_list :\n        try :\n          log(pname, pexec, out_pars['out_path']+  \"/{pname}/dfout.pkl\" )\n          dfout = pexec(dfin, **args)\n          dfout.to_pickle( out_pars['out_path'] +  \"/{pname}/dfout.pkl\"  )\n          dfin = dfout\n        except Exception as e :\n          log(pname, e)\n\n    return dfout\n\n\"\"\"\n\npipe_split(in_pars, out_pars, compute_pars, **kw) \n\npipeline_run( pipe_list, in_pars={ df_colcat }, out_pars, compute_pars, **kw) \n\n\n\n\n\"\"\"\n\n\ndef test(data_path=\"/dataset/\", pars_choice=\"json\"):\n    ### Local test\n    root = os_package_root_path(__file__,0)\n\n    log(\"#### Loading params   ##############################################\")\n    in_pars  = { \"in_path\" : \"{root}/{data_path}/\"  }\n    out_path = { \"out_path\" : \"{os.getcwd()}/pipeline_01/\" }\n    out_path = { \"cpu\" : True }\n\n\n    def TruncatedSVD_fun(df, n_components) :\n       svd = TruncatedSVD(n_components=n_components, n_iter=7, random_state=42)\n       return svd.fit_transform(df.values)    \n\n\n    pipe_list = [  (\"01_NA_values\", pd_navalues, { \"default\": 0.0 }    ),\n                   (\"02_SVD\",       TruncatedSVD_fun, { \"n_components\": 5 }    ),\n                ]\n\n\n    pipeline_run( pipe_list, in_pars, out_pars, compute_pars) \n\n\n    log(\"#### Loading dataset   #############################################\")\n\n\n    log(\"#### Model init, fit   #############################################\")\n\n\n    log(\"#### save the trained model  #######################################\")\n    # save(model, data_pars[\"modelpath\"])\n\n\n    log(\"#### Predict   ####################################################\")\n\n\n    log(\"#### metrics   ####################################################\")\n\n\n    log(\"#### Plot   #######################################################\")\n\n    log(\"#### Save/Load   ##################################################\")\n    print(model2)\n\n\n\n\n\n\nif __name__ == '__main__':\n    VERBOSE = True\n    test(pars_choice=\"json\")\n",
			"file": "mlmodels/pipeline.py",
			"file_size": 3740,
			"file_write_time": 132264202634917788,
			"settings":
			{
				"buffer_size": 3551,
				"line_ending": "Windows"
			}
		},
		{
			"file": "mlmodels/model_gluon/gluon_automl.py",
			"settings":
			{
				"buffer_size": 7895,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "mlmodels/model_gluon/util_autogluon.py",
			"settings":
			{
				"buffer_size": 5517,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "mlmodels/data.py",
			"settings":
			{
				"buffer_size": 1460,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"repl",
				"SublimeREPL: Python"
			],
			[
				"send",
				"SendCode: Choose Program"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control:dis",
				"Package Control: Disable Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 414.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/_devs/Python01/gitdev/mlmodels",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/ztest"
	],
	"file_history":
	[
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_keras/01_deepctr.py",
		"/D/_devs/Python01/gitdev/mlmodels/requirements.txt",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/model_template.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/util_autogluon.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/gluon_auotml.py",
		"/D/_devs/Python01/gitdev/mlmodels/README_DEV.md",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_chatbot/diag_gpt/Chatbot_run.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/util.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/util.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/gluon_ffn.json",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_keras/preprocess.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/data.py",
		"/D/_devs/Python01/gitdev/mlmodels/README.md",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_keras/examples/run_multivalue_movielens.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_sklearn/model.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tch/nbeats.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/json/model_tf-1_lstm.json",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/template/model_keras/01_deep_ctr/models_config.json",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/optim.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_keras/0_cnn.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/gluon_ffn.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/gluon_prophet.py",
		"/D/_devs/Python01/gitdev/_gran_dag/start_run.sh",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/gluon_deepAr.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/1_lstm.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_gluon/requirements.txt",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/distri_tch.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/models.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_chatbot/diag_gpt/myChatbot.py",
		"/C/Users/dellbook/AppData/Roaming/Sublime Text 3/Packages/tgit-st3/tgit-st3.sublime-settings",
		"/C/Users/dellbook/AppData/Roaming/Sublime Text 3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/C/Users/dellbook/AppData/Roaming/Sublime Text 3/Packages/User/SublimeREPL.sublime-settings",
		"/D/_devs/Python01/gitdev/mlmodels/setup.py",
		"/C/Users/dellbook/AppData/Roaming/Sublime Text 3/Packages/User/All Autocomplete.sublime-settings",
		"/C/Users/dellbook/AppData/Roaming/Sublime Text 3/Packages/All Autocomplete/All Autocomplete.sublime-settings",
		"/D/_devs/Python01/gitdev/mlmodels/pypi.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/3_bidirectional_lstm.py",
		"/D/_devs/Python01/gitdev/ztest.py",
		"/D/_devs/Python01/gitdev/__generator/models/Beta-VAE/README.md",
		"/D/_devs/Python01/gitdev/__generator/models/Beta-VAE/dataset.py",
		"/D/_devs/Python01/gitdev/__generator/models/util.py",
		"/D/_devs/Python01/gitdev/_rl_hoken/util.py",
		"/D/Dropbox/aJOB/__point72/docs.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/clI_build_check_repo2.py",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/cli_git.py",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/cli_docs.py",
		"/C/Users/dellbook/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/ztmp/doc_os.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/ztmp/doc_json.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/ztmp/list_json.csv",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/ztmp/doc_numpy.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/ztmp/zz_unitest_run_json.py",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/zz_unitest_run_numpy.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/zz_unitest_run_os2.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/zz_unitest_run_os.txt",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/zz_unitest_run_json.txt",
		"/D/Downloads/cli_docs.py",
		"/D/_devs/Python01/gitdev/autoscale_aws/src/autoscale_aws/batch_daemon_autoscale_cli.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/cli.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/util.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/New File.txt",
		"/D/_devs/Python01/gitdev/_generator_private/models/Beta_VAE/dataset.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/Beta_VAE/main.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/Beta_VAE/utils.py",
		"/D/_devs/Python01/gitdev/_generator_private/README.md",
		"/D/_devs/Python01/gitdev/_generator_private/models/adversarial-on-disentangled/run_factorvae.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/beta-tcvae/disentanglement_metrics.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/beta-tcvae/plot_latent_vs_true.py",
		"/D/_devs/Python01/gitdev/_generator_private/models/beta-tcvae/README.md",
		"/D/_devs/Python01/gitdev/_generator_private/models/beta-vaegan/README.md",
		"/D/_devs/Python01/gitdev/_generator_private/models/script.py",
		"/D/_devs/Python01/gitdev/_rl_hoken/script (1).py",
		"/D/_devs/Python01/gitdev/_rl_hoken/script.py",
		"/D/_devs/Python01/gitdev/__generator/models/Beta-VAE/run_1sin_H_beta4_z10.sh",
		"/C/Users/zenbook/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/D/_devs/Python01/gitdev/__generator/models/Beta-VAE/main.py",
		"/D/_devs/Python01/gitdev/__generator/models/Beta-VAE/solver.py",
		"/D/_devs/Python01/gitdev/__generator/models/cli.py",
		"/D/_devs/Python01/gitdev/__generator/.gitignore",
		"/D/_devs/Python01/gitdev/__generator/models/script.py",
		"/D/_devs/Python01/gitdev/control/main.py",
		"/D/_devs/Python01/gitdev/control/solver.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tch/cnn_classifier.py",
		"/D/_devs/Python01/gitdev/control/submodels.py",
		"/D/_devs/Python01/gitdev/mlmodels/zconda/distri_model_tch.py",
		"/D/tset.py",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/_old.py",
		"/D/_devs/Python01/gitdev/__generator/models/disentangling-vae/main_viz.py",
		"/D/_devs/Python01/gitdev/__generator/models/Beta-VAE/run_3dchairs_H_beta4_z10.sh",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/cli_repo_check.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tch/1_lstm.py",
		"/D/_devs/Python01/gitdev/mlmodels/build/lib/mlmodels/models.py",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/util.py",
		"/D/_devs/Python01/gitdev/cli_code/cli_code/util_log.py",
		"/D/_devs/Python01/gitdev/rl_hoken/script.py",
		"/D/_devs/Python01/gitdev/rl_hoken/script (1).py",
		"/D/app/xplorer2/changes.txt",
		"/D/app/xplorer2/licence.txt",
		"/D/_devs/Python01/ana3/envs/tf14b/Scripts/mlmodels_cli.py",
		"/D/_devs/Python01/gitdev/__generator/models/beta-vaegan/models.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/ztest/search_save/model_tf-1_lstm-py_best-params.json",
		"/D/_devs/Python01/ana3/envs/tf14b/Scripts/models.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/9_vanilla.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/8_gru_2path.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/4_lstm_2path.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/2_encoder_lstm.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/29_fairseq.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/28_attention_is_all_you_need.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/27_byte_net.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/26_lstm_residual.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/25_dnc.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/24_lstm_luong_bahdanau.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/23_lstm_luong.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/22_lstm_bahdanau.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/21_multihead_attention.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/20_only_attention.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/19_lstm_dilated.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/18_lstm_attention_scaleddot.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/17_lstm_seq2seq_bidirectional_attention.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/16_lstm_seq2seq_bidirectional.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/15_lstm_seq2seq_attention.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/14_lstm_attention.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/13_lstm_seq2seq.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/12_vanilla_2path.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/11_bidirectional_vanilla.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/10_encoder_vanilla.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/5_gru.py",
		"/D/_devs/Python01/gitdev/mlmodels/mlmodels/model_tf/6_encoder_gru.py"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 619.0,
		"where_history":
		[
			"D:\\_devs\\Python01\\gitdev\\mlmodels"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_feature_columns",
			"_features",
			"num_",
			"img_",
			"GLUON",
			"kwargs",
			"if arg.do == ",
			"file_out",
			"pprint",
			"import_mo",
			"gather",
			"DataGather",
			"parser.add_argument(",
			"parser.add_argument",
			"os",
			"create(",
			"self._conf",
			"self._config",
			"my_parser",
			"need_to_install_package_set",
			"args"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_cols",
			"_col",
			"n",
			"",
			"keras",
			"kw",
			"",
			"outputfile",
			"log",
			"to(",
			"to",
			"create_model(",
			"self._c",
			"self._conf",
			"p",
			"package_list",
			"arg"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/_devs/Python01/gitdev/cli_code/pypi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2843,
						"regions":
						{
						},
						"selection":
						[
							[
								107,
								107
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "mlmodels/pipeline.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3551,
						"regions":
						{
						},
						"selection":
						[
							[
								888,
								888
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 365.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "mlmodels/model_gluon/gluon_automl.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7895,
						"regions":
						{
						},
						"selection":
						[
							[
								6257,
								4782
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1552.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "mlmodels/model_gluon/util_autogluon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5517,
						"regions":
						{
						},
						"selection":
						[
							[
								2007,
								2007
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1980.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "D:\\_devs\\Python01\\gitdev\\mlmodels\\mlmodels\\model_keras",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "mlmodels/data.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1460,
						"regions":
						{
						},
						"selection":
						[
							[
								1456,
								1456
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 209.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.540099601184,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "zsublime.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 240.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
