{
	"model_pars": {
		"embedding": 40,
		"optimizer": "rmsprop"
	},


	"data_pars": {
		"input": {
			"path": "dataset/text/ner_dataset.csv",
			"test_size": 0.5,
			"X_cols": ["X"],
			"y_cols": ["y"]
		},
		"loader": {
			"encoding": "'ISO-8859-1'"
		},
		"preprocessor": [{
				"data_preprocessor": "{data}.fillna",
				"method": "ffill"
			},



			##### Do not lambda code in the JSON (Code hacking injection...)
			{
				"data_preprocessor": [{
						"index": ["Sentence #", "Word"],
						"encoder": "lambda data, max_len: (lambda d, ml, word_dict,sentence_groups: np.array(keras.preprocessing.sequence.pad_sequences([[word_dict[x] for x in sw] for sw in [y.values for _,y in sentence_groups['Word']]],ml,padding='post', value=0, dtype='int'),dtype='O'))(data, max_len,{y:x for x,y in enumerate(['PAD','UNK']+list(data['Word'].unique()))},data.groupby('Sentence #'))",
						"output_name": "X",
						"max_len": 75
					},
					{
						"index": ["Sentence #", "Tag"],
						"encoder": "lambda data,max_len,classes: (lambda d, ml, c, tag_dict, sentence_groups: np.array([keras.utils.to_categorical(i, num_classes=c+1) for i in keras.preprocessing.sequence.pad_sequences([[tag_dict[w] for w in s] for s in [y.values for _,y in sentence_groups['Tag']]],ml,padding='post', value=0)]))(data,max_len,classes,{y:x for x,y in enumerate(['PAD']+list(data['Tag'].unique()))},data.groupby('Sentence #'))",
						"output_name": "y",
						"max_len": 75,
						"classes": "{data}['Tag'].nunique()"
					}
				]
			}
		],
		"output": {
			"path": "dataset/text/ner_dataset.npz",
			"format": "npz",
			"shape": [
				[23979, 75],
				[23980, 75],
				[23979, 75, 18],
				[23980, 75, 18]
			]
		}
	},

	"compute_pars": {
		"epochs": 1,
		"batch_size": 64
	},
	"out_pars": {
		"path": "ztest/ml_keras/namentity_crm_bilstm/",
		"data_type": "pandas"
	}


}